#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Функция для вычисления определителя матрицы 3x3
double determinant(const vector<vector<double>>& matrix) {
    return matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])
         - matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
         + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]);
}

// Функция для замены столбца в матрице
vector<vector<double>> replace_column(const vector<vector<double>>& matrix, const vector<double>& column, int col_index) {
    vector<vector<double>> new_matrix = matrix;
    for (int i = 0; i < matrix.size(); ++i) {
        new_matrix[i][col_index] = column[i];
    }
    return new_matrix;
}

vector<double> jacobi_method(const vector<vector<double>>& A, const vector<double>& B, int max_iterations = 1000, double tolerance = 1e-10) {
    int n = A.size();
    vector<double> X(n, 0.0); // Начальное приближение
    vector<double> X_new(n, 0.0);

    for (int iteration = 0; iteration < max_iterations; ++iteration) {
        for (int i = 0; i < n; ++i) {
            double sum = B[i];
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    sum -= A[i][j] * X[j];
                }
            }
            X_new[i] = sum / A[i][i];
        }

        // Проверка сходимости
        double max_diff = 0.0;
        for (int i = 0; i < n; ++i) {
            max_diff = max(max_diff, fabs(X_new[i] - X[i]));
        }
        if (max_diff < tolerance) {
            break;
        }

        X = X_new;
    }

    return X;
}

int main() {
    // Матрица коэффициентов
    vector<vector<double>> A = {
        {2, 2, 0},
        {-1, 2, -2},
        {2, -2, 3}
    };

    // Вектор свободных членов
    vector<double> B = {2, 3, 0};

    // Вычисление определителя матрицы A
    double det_A = determinant(A);

    if (fabs(det_A) < 1e-9) {
        cout << "Система не имеет единственного решения." << endl;
    } else {
        // Метод Крамера
        cout << "Решения системы уравнений (метод Крамера):" << endl;
        vector<double> solutions_cramer(3);
        for (int i = 0; i < 3; ++i) {
            vector<vector<double>> Ai = replace_column(A, B, i);
            solutions_cramer[i] = determinant(Ai) / det_A;
            cout << "x" << i + 1 << " = " << solutions_cramer[i] << endl;
        }
    }

    // Метод Якоби
    vector<double> solutions_jacobi = jacobi_method(A, B);

    // Вывод решений
    cout << "\nРешения системы уравнений (метод Якоби):" << endl;
    for (int i = 0; i < solutions_jacobi.size(); ++i) {
        cout << "x" << i + 1 << " = " << solutions_jacobi[i] << endl;
    }

    return 0;
}
